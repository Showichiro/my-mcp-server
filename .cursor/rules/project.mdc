---
description: 
globs: 
alwaysApply: true
---
# MCPサーバープロジェクトの開発標準化ルール

## モジュール構造と型定義
- **ルール**: TypeScriptの型を使用して一貫した構造でモジュールを定義する。
- **例**: 各モジュールに`tool`と`handler`を持たせるために、`types.ts`の`Module`型を使用する。

  ```typescript
  // types.ts
  export type Module = {
    tool: Tool;
    handler: (args: unknown) => {
      content: Content[];
      isError: boolean;
    };
  };
  ```

## ツールの定義と処理
- **ルール**: ツールを名前と説明で定義し、スキーマを使用してリクエストを処理する。
- **例**: `get-string-length.ts`では、`GetStringLengthModule`が`tool`と`handler`で定義されている。

  ```typescript
  // get-string-length.ts
  export const GetStringLengthModule: Module = {
    tool: {
      name: "getStringLength",
      description: "文字列の長さを取得する",
    },
    handler: (args: unknown) => {
      // ... existing code ...
    },
  };
  ```

## リクエスト処理
- **ルール**: サーバーで異なるタイプのリクエストを処理するためにスキーマを使用する。
- **例**: `main.ts`では、サーバーが`setRequestHandler`を使用して異なるリクエストスキーマを管理している。

  ```typescript
  // main.ts
  server.setRequestHandler(ListToolsRequestSchema, () => ({ tools: TOOLS }));
  server.setRequestHandler(CallToolRequestSchema, (request: CallToolRequest) => {
    // ... existing code ...
  });
  ```

## バリデーション
- **ルール**: 入力データが期待される形式を満たしていることを確認するためにバリデータを使用する。
- **例**: `get-string-length.ts`では、`$object`と`$string`バリデータが入力を検証するために使用されている。

  ```typescript
  // get-string-length.ts
  const $param = $object(
    {
      input: $string,
    },
    false
  );
  ```

## 開発環境
- **ルール**: `deno.json`を使用してタスクを定義し、インポートを管理する。
- **例**: サーバーをファイル監視付きで実行するための`dev`タスクが定義されている。

  ```json
  // deno.json
  {
    "tasks": {
      "dev": "deno run --watch main.ts"
    },
    "imports": {
      "@showichiro/validators": "jsr:@showichiro/validators@^0.1.0",
      "@std/assert": "jsr:@std/assert@1"
    }
  }
  ```

## エラーハンドリング
- **ルール**: 不明なツールや無効な入力に対して構造化されたエラーメッセージを返す。
- **例**: `main.ts`では、不明なツールに対してエラーメッセージが返される。

  ```typescript
  // main.ts
  default: {
    return {
      content: [
        {
          type: "text",
          text: `不明なツール: ${name}`,
        },
      ],
      isError: true,
    };
  }
  ```